cmdhistory=["(+ 1 1)" "(ns)" "ns" "(ns 'api-quiz-core)" "(ns api-quiz-core)" "(app)" "(in-ns)" "*ns*" "(in-ns 'api-quiz.core)" "(boot)" "(app)" "*ns*" "(app)" "(*ns*)" "*ns*" "(run-jetty api-routes {\:port 8080})" "(read-string \\"0\\")" "(read-string \\"10\\")" "(run-jetty api-routes {\:port 8080})" "(bigint 200000)" "(biginteger 200000)" "(biginteger \\"200000\\")" "1" "(1)" "1" "(bigint 1)" "(bigint \\"1\\")" "(bigint \\"200\\")" "(biginteger \\"200\\")" "(biginteger \\"200000000\\")" "(ns api-quiz.core\\n (\:gen-class)\\n (\:use compojure.core)\\n (\:use ring.adapter.jetty)\\n (\:use api-quiz.fibonacci)\\n (\:require [compojure.route \:as route]))\\n\\n(defroutes api-routes\\n  (GET \\"/\\" [] {\:status 200})\\n  (GET \\"/fib/\:num\\" [num] (str (fib-iter (biginteger num))))\\n  (POST \\"/store/\:val\\" [val] (str \\"post test val was \\" val))\\n  (route/not-found \\"Page not found\\"))\\n\\n(defn -main [& args]\\n  (run-jetty api-routes {\:port 8080}))" "(run-jetty api-routes {\:port 8080})" "(json/write-str \#{\:a 1})" "(json/write-str {\:a 1})" "(sha1 \\"test\\")" "(ns api-quiz.core\\n (\:gen-class)\\n (\:use compojure.core)\\n (\:use ring.adapter.jetty)\\n (\:use api-quiz.fibonacci)\\n (\:require [compojure.route \:as route]\\n           [clojure.data.json \:as json])\\n (\:import (java.security MessageDigest)))\\n \\n (defn sha1 [obj]\\n  (let [bytes (.getBytes (with-out-str (pr obj)))] \\n    (apply vector (.digest (MessageDigest/getInstance \\"SHA1\\") bytes))))\\n \\n (defn hash-node [node replicas]\\n  (map \#(hash-map (sha1 (str node %)) node) (range replicas)))\\n\\n(defn json-response [data & [status]]\\n  {\:status (or status 200)\\n   \:headers {\\"Content-Type\\" \\"application/json\\"}\\n   \:body (json/write-str {\:response data})})\\n\\n(defroutes api-routes\\n  (GET \\"/\\" [] {\:status 200})\\n  (GET \\"/fib/\:num\\" [num] (json-response (fib-iter (biginteger num))))\\n  (POST \\"/store/\:val\\" [val] (str \\"post test val was \\" val))\\n  (route/not-found \\"Page not found\\"))\\n\\n(defn -main [& args]\\n  (run-jetty api-routes {\:port 8080}))" "(.digest (MessageDigest/getInstance \\"SHA1\\") \\"rofl\\")" "(ns api-quiz.core\\n (\:gen-class)\\n (\:use compojure.core)\\n (\:use ring.adapter.jetty)\\n (\:use api-quiz.fibonacci)\\n (\:require [compojure.route \:as route]\\n           [clojure.data.json \:as json])\\n (\:import (java.security MessageDigest)))\\n \\n(defn get-hash [type data]\\n  (.digest (MessageDigest/getInstance type) (.getBytes data) ))\\n\\n(defn sha1-hash [data]\\n  (get-hash \\"sha1\\" data))\\n\\n(defn get-hash-str [data-bytes]\\n  (apply str \\n\\t(map \\n\\t\\t\#(.substring \\n\\t\\t\\t(Integer/toString \\n\\t\\t(+ (bit-and % 0xff) 0x100) 16) 1) \\n\\t\\tdata-bytes)))\\n\\n\\n(defn json-response [data & [status]]\\n  {\:status (or status 200)\\n   \:headers {\\"Content-Type\\" \\"application/json\\"}\\n   \:body (json/write-str {\:response data})})\\n\\n(defroutes api-routes\\n  (GET \\"/\\" [] {\:status 200})\\n  (GET \\"/fib/\:num\\" [num] (json-response (fib-iter (biginteger num))))\\n  (POST \\"/store/\:val\\" [val] (str \\"post test val was \\" val))\\n  (route/not-found \\"Page not found\\"))\\n\\n(defn -main [& args]\\n  (run-jetty api-routes {\:port 8080}))" "(sha1-hash \\"rofl\\")" "(get-hash-str (sha1-hash \\"rofl\\"))" "(sha1 \\"test\\")" "*ns*" "(in-ns 'api-quiz.core)" "*ns*" "(sha1 \\"test\\")" "(ns api-quiz.core\\n (\:gen-class)\\n (\:use compojure.core)\\n (\:use ring.adapter.jetty)\\n (\:use api-quiz.fibonacci)\\n (\:use api-quiz.sha1)\\n (\:require [compojure.route \:as route]\\n           [clojure.data.json \:as json])\\n (\:import (java.net URL)\\n          (java.lang StringBuilder)\\n          (java.io BufferedReader InputStreamReader)))\\n\\n(defn fetch-url\\n  \\"Return the web page as a string.\\"\\n  [address]\\n  (let [url (URL. address)]\\n    (with-open stream (. url (openStream))\\n      (let [buf (BufferedReader. (InputStreamReader. stream))]\\n        (apply str (line-seq buf))))))\\n\\n(defn json-response [data & [status]]\\n  {\:status (or status 200)\\n   \:headers {\\"Content-Type\\" \\"application/json\\"}\\n   \:body (json/write-str {\:response data})})\\n\\n(defroutes api-routes\\n  (GET \\"/\\" [] {\:status 200})\\n  (GET \\"/fib/\:num\\" [num] (json-response (fib-iter (biginteger num))))\\n  (POST \\"/store/\:val\\" [val] (str \\"post test val was \\" val))\\n  (route/not-found \\"Page not found\\"))\\n\\n(defn -main [& args]\\n  (run-jetty api-routes {\:port 8080}))" "(fetch-url \\"http\://google.com\\")" "*ns*" "(in-ns 'api-quiz.core)" "(fetch-url \\"http\://google.com\\")" "(ns api-quiz.core\\n (\:gen-class)\\n (\:use compojure.core)\\n (\:use ring.adapter.jetty)\\n (\:use api-quiz.fibonacci)\\n (\:use api-quiz.sha1)\\n (\:require [compojure.route \:as route]\\n           [clojure.data.json \:as json])\\n (\:import (java.net URL)\\n          (java.lang StringBuilder)\\n          (java.io BufferedReader InputStreamReader)))\\n\\n(defn fetch-url\\n  \\"Return the web page as a string.\\"\\n  [address]\\n  (let [url (URL. address)]\\n    (with-open [stream (. url (openStream))]\\n      (let [buf (BufferedReader. (InputStreamReader. stream))]\\n        (apply str (line-seq buf))))))\\n\\n(defn json-response [data & [status]]\\n  {\:status (or status 200)\\n   \:headers {\\"Content-Type\\" \\"application/json\\"}\\n   \:body (json/write-str {\:response data})})\\n\\n(defroutes api-routes\\n  (GET \\"/\\" [] {\:status 200})\\n  (GET \\"/fib/\:num\\" [num] (json-response (fib-iter (biginteger num))))\\n  (GET \\"/google-body\\" (json-response (sha1 (fetch-url \\"http\://google.com\\"))))\\n  (POST \\"/store/\:val\\" [val] (str \\"post test val was \\" val))\\n  (route/not-found \\"Page not found\\"))\\n\\n(defn -main [& args]\\n  (run-jetty api-routes {\:port 8080}))" "(run-jetty api-routes {\:port 8080})" "(ns api-quiz.core\\n (\:gen-class)\\n (\:use compojure.core)\\n (\:use ring.adapter.jetty)\\n (\:use api-quiz.fibonacci)\\n (\:use api-quiz.page-sha1)\\n (\:require [compojure.route \:as route]\\n           [clojure.data.json \:as json]))\\n \\n(defn json-response [data & [status]]\\n  {\:status (or status 200)\\n   \:headers {\\"Content-Type\\" \\"application/json\\"}\\n   \:body (json/write-str {\:response data})})\\n\\n(defroutes api-routes\\n  (GET \\"/\\" [] {\:status 200})\\n  (GET \\"/fib/\:num\\" [num] (json-response (fib-iter (biginteger num))))\\n  (GET \\"/google-body\\" [] (json-response (sha1 (fetch-url \\"http\://google.com\\"))))\\n  (POST \\"/store/\:val\\" [val] (json-response \:ok))\\n  (route/not-found \\"Page not found\\"))\\n\\n(defn -main [& args]\\n  (run-jetty api-routes {\:port 8080}))" "1" "(run-jetty api-routes {\:port 8080})" "(-main)" "(ns api-quiz.core\\n (\:gen-class)\\n (\:use compojure.core)\\n (\:use ring.adapter.jetty)\\n (\:use api-quiz.fibonacci)\\n (\:use api-quiz.page-sha1)\\n (\:require [compojure.route \:as route]\\n           [clojure.data.json \:as json]))\\n \\n(defn json-response [data & [status]]\\n  {\:status (or status 200)\\n   \:headers {\\"Content-Type\\" \\"application/json\\"}\\n   \:body (json/write-str {\:response data})})\\n\\n(defroutes api-routes\\n  (GET \\"/\\" [] {\:status 200})\\n  (GET [\\"/fib/\:num\\", \:num \#\\"[0-9]+\\"] [num] (json-response (fib-iter (biginteger num))))\\n  (GET \\"/google-body\\" [] (json-response (sha1 (fetch-url \\"http\://google.com\\"))))\\n  (POST \\"/store/\:val\\" { params \:params } (json-response \:ok))\\n  (route/not-found \\"Page not found\\"))\\n\\n(defn -main [& args]\\n  (run-jetty api-routes {\:port 8080}))" "(-main)" "(db)" "db" "(store-value \\"testtest\\")" "db" "(store-value \\"rofl\\")" "(ns api-quiz.storage\\n  (\:use [clojure.java.jdbc])\\n  (\:refer-clojure \:exclude [resultset-seq]) ;resolve namespace conflict\\n  (\:import [java.io File]))\\n\\n(def db-name \\"storage.db\\")\\n\\n(def db\\n  {\\n   \:classname \\"org.sqlite.JDBC\\"\\n   \:subprotocol \\"sqlite\\"\\n   \:subname db-name\\n  })\\n\\n(def new-db-conn (merge db {\:create true}))\\n\\n(defn create-db []\\n  (try (with-connection new-db-conn\\n         (create-table \:values\\n                       [\:value \:text]))\\n       (catch Exception e (println e))))\\n\\n(defn store-value [data]\\n  (with-connection db\\n    (insert-records \:values {\:value data})))\\n\\n(defn fetch-values []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from values\\"] (doall rs))))\\n\\n(defn get-last []\\n  (vals (last fetch-values)))\\n\\n(if (not (.exists (File. db-name))) create-db)" "(fetch-values)" "(when (not (.exists (File. db-name))) create-db)" "(File. db-name)" "(.exists (File. db-name))" "(not (.exists (File. db-name)))" "(create-db)" "(.exists (File. db-name))" "(if (not (.exists (File. db-name))) create-db)" "(ns api-quiz.storage\\n  (\:use [clojure.java.jdbc])\\n  (\:refer-clojure \:exclude [resultset-seq]) ;resolve namespace conflict\\n  (\:import [java.io File]))\\n\\n(def db-name \\"storage.db\\")\\n\\n(def db\\n  {\\n   \:classname \\"org.sqlite.JDBC\\"\\n   \:subprotocol \\"sqlite\\"\\n   \:subname db-name\\n  })\\n\\n(def new-db-conn (merge db {\:create true}))\\n\\n(defn create-db []\\n  (with-connection new-db-conn\\n         (create-table \:values\\n                       [\:value \:text])))\\n\\n(defn store-value [data]\\n  (with-connection db\\n    (insert-records \:values {\:value data})))\\n\\n(defn fetch-values []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from values\\"] (doall rs))))\\n\\n(defn get-last []\\n  (vals (last fetch-values)))\\n\\n(if (not (.exists (File. db-name))) create-db)" "(if (not (.exists (File. db-name))) create-db)" "(create-db)" "(ns api-quiz.storage\\n  (\:use [clojure.java.jdbc])\\n  (\:refer-clojure \:exclude [resultset-seq]) ;resolve namespace conflict\\n  (\:import [java.io File]))\\n\\n(def db-name \\"storage.db\\")\\n\\n(def db\\n  {\\n   \:classname \\"org.sqlite.JDBC\\"\\n   \:subprotocol \\"sqlite\\"\\n   \:subname db-name\\n  })\\n\\n(def new-db-conn (merge db {\:create true}))\\n\\n;(defn create-db []\\n;  (with-connection new-db-conn\\n;         (create-table \:values\\n;                       [\:value \:text])))\\n\\n(defn create-db []\\n  (try (with-connection db \\n         (create-table \:rofl\\n                       [\:data \:text]))\\n       (catch Exception e (println e))))\\n\\n(create-db)\\n\\n(defn store-value [data]\\n  (with-connection db\\n    (insert-records \:values {\:value data})))\\n\\n(defn fetch-values []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from values\\"] (doall rs))))\\n\\n(defn get-last []\\n  (vals (last fetch-values)))\\n\\n;(if (not (.exists (File. db-name))) create-db)" "(ns api-quiz.storage\\n  (\:use [clojure.java.jdbc])\\n  (\:refer-clojure \:exclude [resultset-seq]) ;resolve namespace conflict\\n  (\:import [java.io File]))\\n\\n(def db-name \\"storage.db\\")\\n\\n(def db\\n  {\\n   \:classname \\"org.sqlite.JDBC\\"\\n   \:subprotocol \\"sqlite\\"\\n   \:subname db-name\\n  })\\n\\n(def new-db-conn (merge db {\:create true}))\\n\\n;(defn create-db []\\n;  (with-connection new-db-conn\\n;         (create-table \:values\\n;                       [\:value \:text])))\\n\\n(defn create-db []\\n  (try (with-connection db \\n         (create-table \:api-storage\\n                       [\:data \:text]))\\n       (catch Exception e (println e))))\\n\\n(create-db)\\n\\n(defn store-value [data]\\n  (with-connection db\\n    (insert-records \:values {\:value data})))\\n\\n(defn fetch-values []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from values\\"] (doall rs))))\\n\\n(defn get-last []\\n  (vals (last fetch-values)))\\n\\n;(if (not (.exists (File. db-name))) create-db)" "(ns api-quiz.storage\\n  (\:use [clojure.java.jdbc])\\n  (\:refer-clojure \:exclude [resultset-seq]) ;resolve namespace conflict\\n  (\:import [java.io File]))\\n\\n(def db-name \\"storage.db\\")\\n\\n(def db\\n  {\\n   \:classname \\"org.sqlite.JDBC\\"\\n   \:subprotocol \\"sqlite\\"\\n   \:subname db-name\\n  })\\n\\n(def new-db-conn (merge db {\:create true}))\\n\\n;(defn create-db []\\n;  (with-connection new-db-conn\\n;         (create-table \:values\\n;                       [\:value \:text])))\\n\\n(defn create-db []\\n  (try (with-connection db \\n         (create-table \:api_storage\\n                       [\:data \:text]))\\n       (catch Exception e (println e))))\\n\\n(create-db)\\n\\n(defn store-value [data]\\n  (with-connection db\\n    (insert-records \:values {\:value data})))\\n\\n(defn fetch-values []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from values\\"] (doall rs))))\\n\\n(defn get-last []\\n  (vals (last fetch-values)))\\n\\n;(if (not (.exists (File. db-name))) create-db)" "(ns api-quiz.storage\\n  (\:use [clojure.java.jdbc])\\n  (\:refer-clojure \:exclude [resultset-seq]) ;resolve namespace conflict\\n  (\:import [java.io File]))\\n\\n(def db-name \\"storage.db\\")\\n\\n(def db\\n  {\\n   \:classname \\"org.sqlite.JDBC\\"\\n   \:subprotocol \\"sqlite\\"\\n   \:subname db-name\\n  })\\n\\n(def new-db-conn (merge db {\:create true}))\\n\\n;(defn create-db []\\n;  (with-connection new-db-conn\\n;         (create-table \:values\\n;                       [\:value \:text])))\\n\\n(defn create-db []\\n  (try (with-connection db \\n         (create-table \:rofl\\n                       [\:data \:text]))\\n       (catch Exception e (println e))))\\n\\n(create-db)\\n\\n(defn store-value [data]\\n  (with-connection db\\n    (insert-records \:values {\:value data})))\\n\\n(defn fetch-values []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from values\\"] (doall rs))))\\n\\n(defn get-last []\\n  (vals (last fetch-values)))\\n\\n;(if (not (.exists (File. db-name))) create-db)" "(ns api-quiz.storage\\n  (\:use [clojure.java.jdbc])\\n  (\:refer-clojure \:exclude [resultset-seq]) ;resolve namespace conflict\\n  (\:import [java.io File]))\\n\\n(def db-name \\"storage.db\\")\\n\\n(def db\\n  {\\n   \:classname \\"org.sqlite.JDBC\\"\\n   \:subprotocol \\"sqlite\\"\\n   \:subname db-name\\n  })\\n\\n(def new-db-conn (merge db {\:create true}))\\n\\n;(defn create-db []\\n;  (with-connection new-db-conn\\n;         (create-table \:values\\n;                       [\:value \:text])))\\n\\n(defn create-db []\\n  (try (with-connection db \\n         (create-table \:api\\n                       [\:data \:text]))\\n       (catch Exception e (println e))))\\n\\n(create-db)\\n\\n(defn store-value [data]\\n  (with-connection db\\n    (insert-records \:values {\:value data})))\\n\\n(defn fetch-values []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from values\\"] (doall rs))))\\n\\n(defn get-last []\\n  (vals (last fetch-values)))\\n\\n;(if (not (.exists (File. db-name))) create-db)" "(fetch-values)" "(ns api-quiz.storage\\n  (\:use [clojure.java.jdbc])\\n  (\:refer-clojure \:exclude [resultset-seq]) ;resolve namespace conflict\\n  (\:import [java.io File]))\\n\\n(def db-name \\"storage.db\\")\\n\\n(def db\\n  {\\n   \:classname \\"org.sqlite.JDBC\\"\\n   \:subprotocol \\"sqlite\\"\\n   \:subname db-name\\n  })\\n\\n(def new-db-conn (merge db {\:create true}))\\n\\n;(defn create-db []\\n;  (with-connection new-db-conn\\n;         (create-table \:values\\n;                       [\:value \:text])))\\n\\n(defn create-db []\\n  (try (with-connection db \\n         (create-table \:api\\n                       [\:data \:text]))\\n       (catch Exception e (println e))))\\n\\n(create-db)\\n\\n(defn store-value [data]\\n  (with-connection db\\n    (insert-records \:values {\:value data})))\\n\\n(defn fetch-values []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from data\\"] (doall rs))))\\n\\n(defn get-last []\\n  (vals (last fetch-values)))\\n\\n;(if (not (.exists (File. db-name))) create-db)" "(fetch-values)" "(ns api-quiz.storage\\n  (\:use [clojure.java.jdbc])\\n  (\:refer-clojure \:exclude [resultset-seq]) ;resolve namespace conflict\\n  (\:import [java.io File]))\\n\\n(def db-name \\"storage.db\\")\\n\\n(def db\\n  {\\n   \:classname \\"org.sqlite.JDBC\\"\\n   \:subprotocol \\"sqlite\\"\\n   \:subname db-name\\n  })\\n\\n(def new-db-conn (merge db {\:create true}))\\n\\n;(defn create-db []\\n;  (with-connection new-db-conn\\n;         (create-table \:values\\n;                       [\:value \:text])))\\n\\n(defn create-db []\\n  (try (with-connection db \\n         (create-table \:api\\n                       [\:data \:text]))\\n       (catch Exception e (println e))))\\n\\n(create-db)\\n\\n(defn store-value [data]\\n  (with-connection db\\n    (insert-records \:values {\:value data})))\\n\\n(defn fetch-values []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from api\\"] (doall rs))))\\n\\n(defn get-last []\\n  (vals (last fetch-values)))\\n\\n;(if (not (.exists (File. db-name))) create-db)" "(fetch-values)" "(defn store-value [value]\\n  (with-connection db\\n    (insert-records \:api {\:data value})))\\n" "(store-value \\"rofl\\")" "(fetch-values)" "(get-last)" "(keys (first fetch-values))" "(defn get-last []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from api\\"] (\:data (last rs)))))\\n" "(get-last)" "(store-value \\"lol\\")" "(get-last)" "(ns api-quiz.storage\\n  (\:use [clojure.java.jdbc])\\n  (\:refer-clojure \:exclude [resultset-seq]) ;resolve namespace conflict\\n  (\:import [java.io File]))\\n\\n(def db-name \\"storage.db\\")\\n\\n(def db\\n  {\\n   \:classname \\"org.sqlite.JDBC\\"\\n   \:subprotocol \\"sqlite\\"\\n   \:subname db-name\\n  })\\n\\n(defn create-db []\\n  (try (with-connection db \\n         (create-table \:api\\n                       [\:data \:text]))\\n       (catch Exception e (println e))))\\n\\n(defn store-value [value]\\n  (with-connection db\\n    (insert-records \:api {\:data value})))\\n\\n(defn get-last []\\n  (with-connection db\\n    (with-query-results rs [\\"select * from api\\"] (\:data (last rs)))))\\n\\n(if (not (.exists (File. db-name))) create-db)" "(get-last)" "(-main)" "(create-db)" "db-name" "(db-name)" "db-name" "(not (.exists (File. db-name)))" "(if (not (.exists (File. db-name))) (println \\"rofl\\"))" "(when(not (.exists (File. db-name))) (println \\"rofl\\"))" "db" "db-name" "(create-db)" "db" "db-name" "create-db" "(create-db)" "(get-last)" "(store-value \\"rofl\\")" "(get-last)" "(ns api-quiz.core\\n (\:gen-class)\\n (\:use api-quiz.fibonacci)\\n (\:use api-quiz.page-sha1)\\n (\:use api-quiz.storage)\\n (\:use compojure.core)\\n (\:use ring.adapter.jetty)\\n (\:require [compojure.route \:as route]\\n           [clojure.data.json \:as json])\\n (\:import [java.io File]))\\n \\n(defn json-response [data & [status]]\\n  {\:status (or status 200)\\n   \:headers {\\"Content-Type\\" \\"application/json\\"}\\n   \:body (json/write-str {\:response data})})\\n\\n(defroutes api-routes\\n  (GET \\"/\\" [] {\:status 200})\\n  (GET [\\"/fib/\:num\\", \:num \#\\"[0-9]+\\"] [num] (json-response (fib-iter (biginteger num))))\\n  (GET \\"/google-body\\" [] (json-response (sha1 (fetch-url \\"http\://google.com\\"))))\\n  (GET \\"/store\\" [] (get-last))\\n  (POST \\"/store\\" { params \:params }\\n        (do\\n          (store-value (params \:val))\\n          (json-response \:ok)))\\n  (route/not-found \\"Page not found\\"))\\n\\n(defn -main [& args]\\n  (create-db)\\n  (run-jetty api-routes {\:port 8080}))" "(create-db)" "(get-last)" "(store-value \\"test\\")" "(get-last)" "(ns api-quiz.core\\n (\:gen-class)\\n (\:use api-quiz.fibonacci)\\n (\:use api-quiz.page-sha1)\\n (\:use api-quiz.storage)\\n (\:use compojure.core)\\n (\:use ring.adapter.jetty)\\n (\:require [compojure.route \:as route]\\n           [clojure.data.json \:as json])\\n (\:import [java.io File]))\\n \\n(defn json-response [data & [status]]\\n  {\:status (or status 200)\\n   \:headers {\\"Content-Type\\" \\"application/json\\"}\\n   \:body (json/write-str {\:response data})})\\n\\n(defroutes api-routes\\n  (GET \\"/\\" [] {\:status 200})\\n  (GET [\\"/fib/\:num\\", \:num \#\\"[0-9]+\\"] [num] (json-response (fib-iter (biginteger num))))\\n  (GET \\"/google-body\\" [] (json-response (sha1 (fetch-url \\"http\://google.com\\"))))\\n  (GET \\"/store\\" [] (json-response (get-last)))\\n  (POST \\"/store\\" { params \:params }\\n        (do\\n          (store-value (params \:val))\\n          (json-response params)))\\n  (route/not-found \\"Page not found\\"))\\n\\n(defn -main [& args]\\n  (if (not (.exists (File. db-name))) (create-db))\\n  (run-jetty api-routes {\:port 8080}))" "(get-last)"]
eclipse.preferences.version=1
